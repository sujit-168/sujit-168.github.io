import{_ as l}from"./chunks/ArticleMetadata.89eb889c.js";import{_ as i,C as p,o as r,c,H as d,w as h,k as o,a as m,Q as u,b as y,e as _}from"./chunks/framework.4303053c.js";import"./chunks/md5.3e7612d8.js";const q=JSON.parse('{"title":"VizTracer 在 ROS 开发中的使用","description":"","frontmatter":{"title":"VizTracer 在 ROS 开发中的使用","date":"2025-01-18 13:08","categories":["VizTracer","Python"],"tags":["VizTracer","Python"],"copyright":true},"headers":[],"relativePath":"note/2025/01/18/the_usage_of_viztracer_on_ros_development.md","filePath":"note/2025/01/18/the_usage_of_viztracer_on_ros_development.md","lastUpdated":1737198814000}'),v={name:"note/2025/01/18/the_usage_of_viztracer_on_ros_development.md"},g=o("h1",{id:"viztracer-在-ros-开发中的使用",tabindex:"-1"},[m("viztracer 在 ROS 开发中的使用 "),o("a",{class:"header-anchor",href:"#viztracer-在-ros-开发中的使用","aria-label":'Permalink to "viztracer 在 ROS 开发中的使用"'},"​")],-1),b=u('<p>VizTracer 是一种低开销的日志记录/调试/分析工具，可以跟踪和可视化您的 python 代码执行。</p><p><img src="https://mirror.ghproxy.com/https://github.com/gaogaotiantian/viztracer/raw/master/img/example.png" alt=""></p><p>前端 <code>UI</code> 由 <code>Perfetto</code> 提供支持。使用<code>A</code>、<code>W</code>、<code>S</code>、<code>D</code>缩放/导航。</p><p>感谢 <code>VizTracer</code> 的作者<a href="https://github.com/gaogaotiantian/" target="_blank" rel="noreferrer">大佬高天</a>开发的 python 调试、分析利器<a href="https://github.com/gaogaotiantian/viztracer" target="_blank" rel="noreferrer">VizTracer</a></p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ul><li>在时间轴上详细记录了函数进入/退出信息以及完整源代码</li><li>超级易于使用，大多数功能无需更改源代码，无包依赖性</li><li>性能开销低，可能是市场上最快的跟踪器</li><li>支持线程、多处理、子进程、异步和 PyTorch 的调试</li><li>使用了强大的前端框架，能够流畅渲染 GB 量级的跟踪数据</li><li>良好的跨平台特性，适用于 Linux/MacOS/Windows</li></ul><h2 id="基本环境安装" tabindex="-1">基本环境安装 <a class="header-anchor" href="#基本环境安装" aria-label="Permalink to &quot;基本环境安装&quot;">​</a></h2><ul><li>pip 安装 VizTracer</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">pip</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">install</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">viztracer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">viztracer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="vscode-安装及配置" tabindex="-1">VSCode 安装及配置 <a class="header-anchor" href="#vscode-安装及配置" aria-label="Permalink to &quot;VSCode 安装及配置&quot;">​</a></h2><ul><li>安装 VizTracer</li></ul><p>vscode 插件市场搜索 <code>VizTracer</code> 安装即可</p><p><img src="https://cn-sy1.rains3.com/dfdfgf/blog/the_usage_of_viztracer_on_ros_development/viztracer_install_vsocde.png" alt=""></p><ul><li>配置 VizTracer 扩展 <img src="https://cn-sy1.rains3.com/dfdfgf/blog/the_usage_of_viztracer_on_ros_development/viztracer_vsocde_setting.png" alt=""></li></ul><p>这样，就可以在运行时，自动生成 VizTracer 的追踪文件，并自动打开浏览器进行查看</p><h2 id="在命令行中运行-viztracer" tabindex="-1">在命令行中运行 VizTracer <a class="header-anchor" href="#在命令行中运行-viztracer" aria-label="Permalink to &quot;在命令行中运行 VizTracer&quot;">​</a></h2><p>在命令行中运行 VizTracer，并指定要跟踪的 python 文件</p><ul><li><a href="https://viztracer.readthedocs.io/en/latest/basic_usage.html" target="_blank" rel="noreferrer">命令行使用</a></li></ul><h3 id="无需传参运行-viztracer" tabindex="-1">无需传参运行 VizTracer <a class="header-anchor" href="#无需传参运行-viztracer" aria-label="Permalink to &quot;无需传参运行 VizTracer&quot;">​</a></h3><p>生成 VizTracer 的可视化文件<code>result.json</code></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">python3</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-m</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">viztracer</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">my_script.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">python3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">viztracer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_script.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在浏览器中打开 VizTracer 的可视化文件</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">vizviewer</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">result.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">vizviewer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">result.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">技巧</p><p>可以在使用时添加<code>--open</code>参数，这样就可以在运行时自动打开浏览器进行查看，完整命令如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">python3</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-m</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">viztracer</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--open</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">my_script.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">python3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">viztracer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--open</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_script.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><h3 id="传参运行-viztracer" tabindex="-1">传参运行 VizTracer <a class="header-anchor" href="#传参运行-viztracer" aria-label="Permalink to &quot;传参运行 VizTracer&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">python3</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-m</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">viztracer</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">my_script.py</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">arg1</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">arg2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">python3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">viztracer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_script.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arg1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arg2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="vscode-中运行-viztracer" tabindex="-1">VSCode 中运行 VizTracer <a class="header-anchor" href="#vscode-中运行-viztracer" aria-label="Permalink to &quot;VSCode 中运行 VizTracer&quot;">​</a></h2><p><img src="https://mirror.ghproxy.com/https://github.com/gaogaotiantian/VizTracer-vscode/raw/master/assets/demo.gif" alt=""></p><h3 id="viztracer-追踪-ros-程序" tabindex="-1">VizTracer 追踪 ROS 程序 <a class="header-anchor" href="#viztracer-追踪-ros-程序" aria-label="Permalink to &quot;VizTracer 追踪 ROS 程序&quot;">​</a></h3><p><img src="https://cn-sy1.rains3.com/dfdfgf/blog/the_usage_of_viztracer_on_ros_development/cam_img_display.png" alt=""></p><p>可以详细看到，程序在运行时的调用栈，以及函数的执行时间等关键细节信息</p><h4 id="完整的时间线追踪" tabindex="-1">完整的时间线追踪 <a class="header-anchor" href="#完整的时间线追踪" aria-label="Permalink to &quot;完整的时间线追踪&quot;">​</a></h4><p><img src="https://cn-sy1.rains3.com/dfdfgf/blog/the_usage_of_viztracer_on_ros_development/all_timeline.png" alt=""></p><h4 id="create-subscription-函数调用栈" tabindex="-1"><code>create_subscription</code> 函数调用栈 <a class="header-anchor" href="#create-subscription-函数调用栈" aria-label="Permalink to &quot;`create_subscription` 函数调用栈&quot;">​</a></h4><p>可以看到订阅者创建的调用栈持续了 30 ms <img src="https://cn-sy1.rains3.com/dfdfgf/blog/the_usage_of_viztracer_on_ros_development/create_sub.png" alt=""></p><h4 id="spin-once-函数调用栈" tabindex="-1"><code>spin_once</code> 函数调用栈 <a class="header-anchor" href="#spin-once-函数调用栈" aria-label="Permalink to &quot;`spin_once` 函数调用栈&quot;">​</a></h4><p>而 <code>spin_once</code> 函数调用栈单次持续了 124ms 秒，与订阅者创建的调用栈相比，两者相差约 4 倍。 <img src="https://cn-sy1.rains3.com/dfdfgf/blog/the_usage_of_viztracer_on_ros_development/spin_once.png" alt=""></p><p>有了这些信息，我们就可以非常容易得可视化的找到性能瓶颈位置，并针对程序进行优化。</p><h2 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h2><ul><li><p>VizTracer 使用 sys.setprofile() （Python3.12 之前）和 sys.monitoring（Python3.12 之后）作为其分析器功能，因此它会与也使用这些机制的其他分析工具发生冲突。使用 VizTracer 时要注意这一点</p></li><li><p>WSL1 上的时钟分辨率和延迟非常糟糕，因此如果您使用 WSL1，您可能会遇到额外的开销。除了升级到 WSL2 之外，没有其他解决方案。</p></li><li><p>VizTracer 与其他需要在模块内执行任意代码的 Python 工具一样，可能会与检查顶层模块或具有其他结构要求的代码发生冲突。例如，如果您从命令行使用 VizTracer，unittest.main() 将不起作用。有一些方法可以避免它。您可以使用内联 VizTracer，它始终有效。或者您可以将模块指定为 unittest.main() ，这不是通用解决方案，但无需进行太多代码更改即可工作。</p></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><div id="refer-anchor-1"></div><ul><li>[1] <a href="https://viztracer.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">VizTracer</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2] <a href="https://github.com/gaogaotiantian/viztracer-vscode" target="_blank" rel="noreferrer">VizTracer VSCode 插件</a></li></ul>',45);function z(a,f,C,F,k,V){const t=l,n=p("ClientOnly");return r(),c("div",null,[g,d(n,null,{default:h(()=>{var e,s;return[(((e=a.$frontmatter)==null?void 0:e.aside)??!0)&&(((s=a.$frontmatter)==null?void 0:s.showArticleMetadata)??!0)?(r(),y(t,{key:0,article:a.$frontmatter},null,8,["article"])):_("",!0)]}),_:1}),b])}const P=i(v,[["render",z]]);export{q as __pageData,P as default};
