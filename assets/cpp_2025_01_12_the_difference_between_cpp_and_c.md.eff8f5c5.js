import{_ as l}from"./chunks/ArticleMetadata.77410820.js";import{_ as c,C as p,o as r,c as _,H as d,w as s,k as o,a as h,Q as m,b as u,e as f}from"./chunks/framework.fcce45dc.js";import"./chunks/md5.3e7612d8.js";const O=JSON.parse('{"title":"C++ 和 C 的区别","description":"","frontmatter":{"title":"C++ 和 C 的区别","date":"2025-01-12 20:42","categories":["cpp"],"tags":["cpp","google"],"copyright":true},"headers":[],"relativePath":"cpp/2025/01/12/the_difference_between_cpp_and_c.md","filePath":"cpp/2025/01/12/the_difference_between_cpp_and_c.md","lastUpdated":1736774496000}'),b={name:"cpp/2025/01/12/the_difference_between_cpp_and_c.md"},C=o("h1",{id:"c-和-c-的区别",tabindex:"-1"},[h("C++ 和 C 的区别 "),o("a",{class:"header-anchor",href:"#c-和-c-的区别","aria-label":'Permalink to "C++ 和 C 的区别"'},"​")],-1),P=m('<h2 id="面向对象和面向过程语言的区别" tabindex="-1">面向对象和面向过程语言的区别 <a class="header-anchor" href="#面向对象和面向过程语言的区别" aria-label="Permalink to &quot;面向对象和面向过程语言的区别&quot;">​</a></h2><p>首要这两种思想没有绝对好坏，优劣，只是适合不同的场景。</p><p>面向过程（Procedure Oriented Programming）就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p><p>面向对象 (Object Oriented Programming) 是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</p><h2 id="举例说明-五子棋" tabindex="-1">举例说明：五子棋 <a class="header-anchor" href="#举例说明-五子棋" aria-label="Permalink to &quot;举例说明：五子棋&quot;">​</a></h2><p>举一个例子：例如五子棋，</p><p>面向过程的设计思路就是首先分析问题的步骤：</p><ul><li>开始游戏，黑子先走，</li><li>绘制画面，判断输赢，</li><li>轮到白子，绘制画面，</li><li>判断输赢，返回步骤 2，9、输出最后结果。</li></ul><p>把上面每个步骤用分别的函数来实现，问题就解决了。</p><p>而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为</p><ol><li>黑白双方，这两方的行为是一模一样的，</li><li>棋盘系统，负责绘制画面，</li><li>规则系统，负责判定诸如犯规、输赢等。第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的 i 变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。</li></ol><p>可以明显地看出，面向对象是以功能来划分问题，而不是步骤。同样是绘制棋局，这样的行为在面向过程的设计中分散在了总多步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。功能上的统一保证了面向对象设计的可扩展性。</p><h2 id="两者的特点" tabindex="-1">两者的特点 <a class="header-anchor" href="#两者的特点" aria-label="Permalink to &quot;两者的特点&quot;">​</a></h2><h3 id="面向过程的优势与不足" tabindex="-1">面向过程的优势与不足 <a class="header-anchor" href="#面向过程的优势与不足" aria-label="Permalink to &quot;面向过程的优势与不足&quot;">​</a></h3><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发，性能是最重要的因素。</p><p>缺点：没有面向对象易维护、易复用、易扩展</p><h3 id="面向对象的优势与不足" tabindex="-1">面向对象的优势与不足 <a class="header-anchor" href="#面向对象的优势与不足" aria-label="Permalink to &quot;面向对象的优势与不足&quot;">​</a></h3><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p>',19);function g(e,k,q,x,w,N){const i=l,n=p("ClientOnly");return r(),_("div",null,[C,d(n,null,{default:s(()=>{var a,t;return[(((a=e.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=e.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(r(),u(i,{key:0,article:e.$frontmatter},null,8,["article"])):f("",!0)]}),_:1}),P])}const A=c(b,[["render",g]]);export{O as __pageData,A as default};
