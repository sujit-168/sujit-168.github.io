import{_ as l}from"./chunks/ArticleMetadata.77410820.js";import{_ as n,C as i,o as t,c as s,H as p,w as h,k as r,a as _,Q as u,b as g,e as m}from"./chunks/framework.fcce45dc.js";import"./chunks/md5.3e7612d8.js";const S=JSON.parse('{"title":"Google C++ 风格指南概述","description":"","frontmatter":{"title":"Google C++ 风格指南概述","date":"2025-01-12 20:42","categories":["cpp"],"tags":["cpp","google"],"copyright":true},"headers":[],"relativePath":"cpp/2025/01/12/cpp_style_guide_of_google.md","filePath":"cpp/2025/01/12/cpp_style_guide_of_google.md","lastUpdated":1736686939000}'),f={name:"cpp/2025/01/12/cpp_style_guide_of_google.md"},b=r("h1",{id:"google-c-风格指南概述",tabindex:"-1"},[_("Google C++ 风格指南概述 "),r("a",{class:"header-anchor",href:"#google-c-风格指南概述","aria-label":'Permalink to "Google C++ 风格指南概述"'},"​")],-1),k=u('<h3 id="命名约定" tabindex="-1">命名约定 <a class="header-anchor" href="#命名约定" aria-label="Permalink to &quot;命名约定&quot;">​</a></h3><p>函数命名，变量命名、文件命名要有描述性，少用缩写</p><h3 id="文件命名" tabindex="-1">文件命名 <a class="header-anchor" href="#文件命名" aria-label="Permalink to &quot;文件命名&quot;">​</a></h3><p>文件名要全部小写，用下划线 (<code>_</code>) 连起来，c++ 文件要以 <code>.cc</code> 结尾，头文件以 <code>.h</code> 结尾，专门插入文本的文件以 <code>.inc</code> 结尾</p><h3 id="类命名" tabindex="-1">类命名 <a class="header-anchor" href="#类命名" aria-label="Permalink to &quot;类命名&quot;">​</a></h3><p>类的每个单词首字母均大写，不包含下划线，比如：<code>MyExcitingClass</code></p><h3 id="变量命名" tabindex="-1">变量命名 <a class="header-anchor" href="#变量命名" aria-label="Permalink to &quot;变量命名&quot;">​</a></h3><p>变量名一律小写，单词之间用下划线连接</p><p>类的成员变量以下划线 (<code>_</code>) 结尾</p><p>结构体成员变量和类一样</p><h3 id="常量命名" tabindex="-1">常量命名 <a class="header-anchor" href="#常量命名" aria-label="Permalink to &quot;常量命名&quot;">​</a></h3><p>在全局或类里的常量名称前加 k: <code>kDaysInAWeek</code>. 且除去开头的 <code>k</code> 之外每个单词开头字母均大写。</p><p>所有编译时常量，无论是局部的，全局的还是类中的，和其他变量稍微区别一下。k 后接大写字母开头的单词：</p><p><code>const int kDaysInAWeek = 7;</code></p><h3 id="函数命名" tabindex="-1">函数命名 <a class="header-anchor" href="#函数命名" aria-label="Permalink to &quot;函数命名&quot;">​</a></h3><p>常规函数使用大小写混合，如 <code>MyExcitingFunction()</code></p><p>如果您的某函数出错时就要直接 crash, 那么就在函数名加上 <code>OrDie</code>.</p><p>取值（<code>Accessors</code>）和设值（<code>Mutators</code>）函数要与存取的变量名匹配，用小写：<code>int num_entries() const { return num_entries_; }</code></p><h3 id="函数参数" tabindex="-1">函数参数 <a class="header-anchor" href="#函数参数" aria-label="Permalink to &quot;函数参数&quot;">​</a></h3><p>跟变量命名一样</p><h3 id="宏命名" tabindex="-1">宏命名 <a class="header-anchor" href="#宏命名" aria-label="Permalink to &quot;宏命名&quot;">​</a></h3><p>全部大写，像这样命名：<code>MY_MACRO_THAT_SCARES_SMALL_CHILDREN</code></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Google 的命名约定很高明，比如写了简单的类 <code>QueryResult</code>, 接着又可以直接定义一个变量 <code>query_result</code>, 区分度很好；再次，类内变量以下划线结尾，那么就可以直接传入同名的形参，比如 <code>TextQuery::TextQuery(std::string word) : word_(word) {}</code> , 其中 <code>word_</code> 自然是类内私有成员。</p><h2 id="图解" tabindex="-1">图解 <a class="header-anchor" href="#图解" aria-label="Permalink to &quot;图解&quot;">​</a></h2><p><a href="https://blog.csdn.net/voidccc/article/details/37599203" target="_blank" rel="noreferrer">voidccc</a>制作了一个图解，可以参考一下 <img src="https://img-blog.csdn.net/20140713220242000" alt=""></p><ul><li><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/" target="_blank" rel="noreferrer">Google C++ 风格指南</a></li></ul>',27);function q(e,y,x,C,P,A){const c=l,d=i("ClientOnly");return t(),s("div",null,[b,p(d,null,{default:h(()=>{var a,o;return[(((a=e.$frontmatter)==null?void 0:a.aside)??!0)&&(((o=e.$frontmatter)==null?void 0:o.showArticleMetadata)??!0)?(t(),g(c,{key:0,article:e.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),k])}const w=n(f,[["render",q]]);export{S as __pageData,w as default};
